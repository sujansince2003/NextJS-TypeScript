// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// model User {
//   id        String  @id @default(auto()) @map("_id") @db.ObjectId //Prisma ORM does not support fields starting with _, so this needs to be mapped to a Prisma ORM field using the @map attribute. 
//   email     String  @unique
//   username  String  @unique
//   followers Int     @default(0)
//   isactive  Boolean @default(true)
// }

// model Product {
//   id      String  @id @default(auto()) @map("_id") @db.ObjectId //Prisma ORM does not support fields starting with _, so this needs to be mapped to a Prisma ORM field using the @map attribute. 
//   name    String
//   price   Int
//   instock Boolean @default(true)
// }

// creating the migratiion.this helps to bulild the conection bwtween prisma model and database model
// for realtion db  npx prisma migrate dev
//for non relational(mongodb) npx db push 

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime? @map("email_verified")
  image          String?
  hashedPassword String?
  accounts       Account[]
  sessions       Session[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
